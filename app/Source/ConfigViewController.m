
#import "ConfigViewController.h"

// This symbol comes from GrocerySync_vers.c, generated by the versioning system.
extern int DeviseTrackerVersionNumber;


@implementation ConfigViewController


@synthesize urlField, versionField, autoSyncSwitch;


- (id)init {
    self = [super initWithNibName: @"ConfigViewController" bundle: nil];
    if (self) {
        // Custom initialization
        self.navigationItem.title = @"Configure Sync";

        UIBarButtonItem* purgeButton = [[UIBarButtonItem alloc] initWithTitle: @"Done"
                                                                style:UIBarButtonItemStyleDone
                                                               target:self
                                                               action:@selector(done:)];
        self.navigationItem.leftBarButtonItem = purgeButton;
    }
    return self;
}


#pragma mark - View lifecycle


- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];

    self.urlField.text = [[NSUserDefaults standardUserDefaults] objectForKey:@"syncpoint"];

    self.versionField.text = [NSString stringWithFormat: @"this is build #%.0d",
                              DeviseTrackerVersionNumber];
}


- (IBAction)learnMore:(id)sender {
    static NSString* const kLearnMoreURLs[] = {
        @"http://www.couchbase.com/communities/couchbase-lite",
        @"http://www.couchbase.com/communities/couchbase-sync-gateway",
        @"http://console.couchbasecloud.com/index/",
        @"https://github.com/couchbaselabs/iOS-Couchbase-Demo"
    };
    NSURL* url = [NSURL URLWithString: kLearnMoreURLs[[sender tag]]];
    [[UIApplication sharedApplication] openURL: url];
}


- (void)pop {
    UINavigationController* navController = (UINavigationController*)self.parentViewController;
    [navController popViewControllerAnimated: YES];
}


- (IBAction)done:(id)sender {
    NSString* remoteURLStr = self.urlField.text;
    if (remoteURLStr.length > 0) {
        NSURL *remoteURL = [NSURL URLWithString:remoteURLStr];
        if (!remoteURL || ![remoteURL.scheme hasPrefix: @"http"]) {
            // Oops, not a valid URL:
            NSString* message = @"You entered an invalid URL. Do you want to fix it or revert back to what it was before?";
            UIAlertView* alert = [[UIAlertView alloc] initWithTitle: @"Invalid URL"
                                                            message: message
                                                           delegate: self
                                                  cancelButtonTitle: @"Fix It"
                                                  otherButtonTitles: @"Revert", nil];
            [alert show];
            return;
        }
        
        // If user just enters the server URL, fill in a default database name:
        if ([remoteURL.path isEqual: @""] || [remoteURL.path isEqual: @"/"]) {
            remoteURL = [remoteURL URLByAppendingPathComponent: @"lledscouch"];
            remoteURLStr = remoteURL.absoluteString;
        }        
    }
    [[NSUserDefaults standardUserDefaults] setObject: remoteURLStr forKey:@"syncpoint"];
    [self pop];
}


- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
    if (buttonIndex > 0) {
        [self pop]; // Go back to the main screen without saving the URL
    }
}


@end
